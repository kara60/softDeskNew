@page "/admin/ticket-types"
@rendermode InteractiveServer

<PageTitle>Ticket Türleri Yönetimi - SoftDesk Admin</PageTitle>

<!-- Page Header -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-semibold text-gray-900 mb-2">Ticket Türleri Yönetimi</h1>
            <p class="text-gray-600">Ticket türlerini ve form alanlarını tanımlayın</p>
        </div>
        <button @onclick="OpenCreateModal" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-sm transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Yeni Ticket Türü
        </button>
    </div>
</div>

<!-- Ticket Types List -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    @foreach (var ticketType in TicketTypes)
    {
        <div class="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-200">
            <div class="flex items-start justify-between mb-4">
                <div class="flex items-center">
                    <div class="w-12 h-12 rounded-xl flex items-center justify-center mr-4" style="background-color: @ticketType.Color;">
                        <span class="text-2xl">@ticketType.Icon</span>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900">@ticketType.Name</h3>
                        <p class="text-sm text-gray-600">@ticketType.Description</p>
                    </div>
                </div>
                <div class="flex items-center space-x-2">
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(ticketType.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                        @(ticketType.IsActive ? "Aktif" : "Pasif")
                    </span>
                </div>
            </div>

            <!-- Form Fields Summary -->
            <div class="mb-4">
                <h4 class="text-sm font-medium text-gray-700 mb-2">Form Alanları (@ticketType.FormFields.Count)</h4>
                <div class="flex flex-wrap gap-2">
                    @foreach (var field in ticketType.FormFields.Take(3))
                    {
                        <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-100 text-blue-700">
                            @field.DisplayName
                        </span>
                    }
                    @if (ticketType.FormFields.Count > 3)
                    {
                        <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-gray-100 text-gray-700">
                            +@(ticketType.FormFields.Count - 3) daha
                        </span>
                    }
                </div>
            </div>

            <!-- Actions -->
            <div class="flex items-center justify-between pt-4 border-t border-gray-100">
                <div class="text-xs text-gray-500">
                    Oluşturulma: @ticketType.CreatedAt.ToString("dd.MM.yyyy")
                </div>
                <div class="flex items-center space-x-2">
                    <button @onclick="@(() => EditTicketType(ticketType))" class="inline-flex items-center px-3 py-1 border border-blue-300 text-xs font-medium rounded-lg text-blue-700 bg-blue-50 hover:bg-blue-100 transition-colors">
                        <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Düzenle
                    </button>
                    <button @onclick="@(() => ManageFormFields(ticketType))" class="inline-flex items-center px-3 py-1 border border-green-300 text-xs font-medium rounded-lg text-green-700 bg-green-50 hover:bg-green-100 transition-colors">
                        <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Form Dizaynı
                    </button>
                    <button @onclick="@(() => ToggleStatus(ticketType))" class="inline-flex items-center px-3 py-1 border border-gray-300 text-xs font-medium rounded-lg text-gray-700 bg-gray-50 hover:bg-gray-100 transition-colors">
                        @(ticketType.IsActive ? "Pasifleştir" : "Aktifleştir")
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (ShowModal)
{
    <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @onclick="CloseModal"></div>

            <div class="inline-block align-bottom bg-white rounded-2xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-6 pt-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-lg font-medium text-gray-900">
                            @(IsEditMode ? "Ticket Türü Düzenle" : "Yeni Ticket Türü")
                        </h3>
                        <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-600">
                            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                        </button>
                    </div>

                    <div class="space-y-4">
                        <!-- Name -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Türü Adı *</label>
                            <input type="text" @bind="CurrentTicketType.Name" placeholder="Hata/Sorun Bildirimi"
                                   class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>

                        <!-- Description -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Açıklama</label>
                            <textarea @bind="CurrentTicketType.Description" rows="3" placeholder="Bu ticket türünün ne için kullanıldığını açıklayın..."
                                      class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"></textarea>
                        </div>

                        <!-- Icon & Color -->
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">İkon</label>
                                <div class="grid grid-cols-5 gap-2">
                                    @foreach (var icon in AvailableIcons)
                                    {
                                        <button type="button" @onclick="@(() => CurrentTicketType.Icon = icon)"
                                                class="w-10 h-10 rounded-lg border-2 flex items-center justify-center text-lg hover:bg-gray-50 @(CurrentTicketType.Icon == icon ? "border-blue-500 bg-blue-50" : "border-gray-200")">
                                            @icon
                                        </button>
                                    }
                                </div>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Renk</label>
                                <div class="grid grid-cols-4 gap-2">
                                    @foreach (var color in AvailableColors)
                                    {
                                        <button type="button" @onclick="@(() => CurrentTicketType.Color = color.Value)"
                                                class="w-10 h-10 rounded-lg border-2 @(CurrentTicketType.Color == color.Value ? "border-gray-800" : "border-gray-200")"
                                                style="background-color: @color.Value" title="@color.Name">
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Preview -->
                        <div class="bg-gray-50 rounded-lg p-4">
                            <p class="text-xs font-medium text-gray-500 mb-2">Önizleme:</p>
                            <div class="flex items-center">
                                <div class="w-12 h-12 rounded-xl flex items-center justify-center mr-3" style="background-color: @CurrentTicketType.Color;">
                                    <span class="text-2xl">@CurrentTicketType.Icon</span>
                                </div>
                                <div>
                                    <h4 class="font-semibold text-gray-900">@(!string.IsNullOrEmpty(CurrentTicketType.Name) ? CurrentTicketType.Name : "Ticket Türü Adı")</h4>
                                    <p class="text-sm text-gray-600">@(!string.IsNullOrEmpty(CurrentTicketType.Description) ? CurrentTicketType.Description : "Açıklama buraya gelecek")</p>
                                </div>
                            </div>
                        </div>

                        <!-- Sort Order -->
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Sıralama</label>
                            <input type="number" @bind="CurrentTicketType.SortOrder"
                                   class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                    </div>
                </div>

                <div class="bg-gray-50 px-6 py-4 flex items-center justify-end space-x-3">
                    <button @onclick="CloseModal" class="px-4 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition-colors">
                        İptal
                    </button>
                    <button @onclick="SaveTicketType" disabled="@IsSaving" class="@(IsSaving ? "bg-gray-400 cursor-not-allowed" : "bg-blue-600 hover:bg-blue-700") px-4 py-2 border border-transparent rounded-lg text-sm font-medium text-white transition-colors">
                        @(IsSaving ? "Kaydediliyor..." : (IsEditMode ? "Güncelle" : "Kaydet"))
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Form Fields Management Modal -->
@if (ShowFormFieldsModal)
{
    <div class="fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
        <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" @onclick="CloseFormFieldsModal"></div>

            <div class="inline-block align-bottom bg-white rounded-2xl text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-4xl sm:w-full">
                <div class="bg-white px-6 pt-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-lg font-medium text-gray-900">
                            @SelectedTicketTypeForForm?.Name - Form Dizaynı
                        </h3>
                        <div class="flex items-center space-x-3">
                            <button @onclick="AddNewFormField" class="inline-flex items-center px-3 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-green-600 hover:bg-green-700 transition-colors">
                                <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                Yeni Alan
                            </button>
                            <button @onclick="CloseFormFieldsModal" class="text-gray-400 hover:text-gray-600">
                                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>
                    </div>

                    <!-- Form Fields List -->
                    <div class="space-y-4 max-h-96 overflow-y-auto">
                        @if (SelectedTicketTypeForForm?.FormFields.Any() == true)
                        {
                            @foreach (var field in SelectedTicketTypeForForm.FormFields.OrderBy(f => f.SortOrder))
                            {
                                <div class="bg-gray-50 rounded-lg p-4 border border-gray-200">
                                    <div class="flex items-center justify-between">
                                        <div class="flex-1">
                                            <div class="flex items-center space-x-4">
                                                <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-blue-100 text-blue-700">
                                                    @GetFieldTypeDisplayName(field.FieldType)
                                                </span>
                                                <h4 class="font-medium text-gray-900">@field.DisplayName</h4>
                                                @if (field.IsRequired)
                                                {
                                                    <span class="inline-flex items-center px-2 py-1 rounded-md text-xs font-medium bg-red-100 text-red-700">
                                                        Zorunlu
                                                    </span>
                                                }
                                            </div>
                                            <p class="text-sm text-gray-600 mt-1">@field.HelpText</p>
                                        </div>
                                        <div class="flex items-center space-x-2">
                                            <button @onclick="@(() => EditFormField(field))" class="text-blue-600 hover:text-blue-800">
                                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                                </svg>
                                            </button>
                                            <button @onclick="@(() => DeleteFormField(field))" class="text-red-600 hover:text-red-800">
                                                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-8">
                                <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                </svg>
                                <h3 class="text-sm font-medium text-gray-900 mb-2">Henüz form alanı yok</h3>
                                <p class="text-sm text-gray-500">Bu ticket türü için form alanları ekleyin</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<TicketTypeData> TicketTypes = new();
    private bool ShowModal = false;
    private bool ShowFormFieldsModal = false;
    private bool IsEditMode = false;
    private bool IsSaving = false;
    private TicketTypeData CurrentTicketType = new();
    private TicketTypeData? SelectedTicketTypeForForm;

    private readonly List<string> AvailableIcons = new()
    {
        "🐛", "⭐", "📚", "🔧", "💡", "📋", "🎯", "🚀", "💬", "📊",
        "🔍", "⚙️", "📝", "🎨", "🔐", "📱", "💻", "🌐", "📈", "🎭"
    };

    private readonly List<ColorOption> AvailableColors = new()
    {
        new("Mavi", "#3b82f6"),
        new("Kırmızı", "#ef4444"),
        new("Yeşil", "#10b981"),
        new("Sarı", "#f59e0b"),
        new("Mor", "#8b5cf6"),
        new("Pembe", "#ec4899"),
        new("Turuncu", "#f97316"),
        new("Gri", "#6b7280")
    };

    protected override void OnInitialized()
    {
        LoadTicketTypes();
    }

    private void LoadTicketTypes()
    {
        // Sample data - normally would come from API
        TicketTypes = new List<TicketTypeData>
        {
            new TicketTypeData
            {
                Id = Guid.NewGuid(),
                Name = "Hata/Sorun Bildirimi",
                Description = "Sistem hataları ve teknik sorunlar için acil destek",
                Icon = "🐛",
                Color = "#ef4444",
                IsActive = true,
                SortOrder = 1,
                CreatedAt = DateTime.Now.AddDays(-5),
                FormFields = new List<FormFieldData>
                {
                    new FormFieldData { DisplayName = "Hata Açıklaması", FieldType = "textarea", IsRequired = true },
                    new FormFieldData { DisplayName = "Ekran Görüntüsü", FieldType = "file", IsRequired = false },
                    new FormFieldData { DisplayName = "Hata Tekrar Ediyor mu?", FieldType = "select", IsRequired = true }
                }
            },
            new TicketTypeData
            {
                Id = Guid.NewGuid(),
                Name = "Yeni Özellik Talebi",
                Description = "Sistem geliştirme ve yeni özellik talepleri",
                Icon = "⭐",
                Color = "#3b82f6",
                IsActive = true,
                SortOrder = 2,
                CreatedAt = DateTime.Now.AddDays(-3),
                FormFields = new List<FormFieldData>
                {
                    new FormFieldData { DisplayName = "Özellik Açıklaması", FieldType = "textarea", IsRequired = true },
                    new FormFieldData { DisplayName = "İş Önceliği", FieldType = "select", IsRequired = true }
                }
            }
        };
    }

    #region Modal Operations
    private void OpenCreateModal()
    {
        CurrentTicketType = new TicketTypeData { Color = "#3b82f6", Icon = "📋" };
        IsEditMode = false;
        ShowModal = true;
    }

    private void EditTicketType(TicketTypeData ticketType)
    {
        CurrentTicketType = new TicketTypeData
        {
            Id = ticketType.Id,
            Name = ticketType.Name,
            Description = ticketType.Description,
            Icon = ticketType.Icon,
            Color = ticketType.Color,
            SortOrder = ticketType.SortOrder,
            IsActive = ticketType.IsActive
        };
        IsEditMode = true;
        ShowModal = true;
    }

    private void CloseModal()
    {
        ShowModal = false;
        CurrentTicketType = new();
    }

    private async Task SaveTicketType()
    {
        if (string.IsNullOrWhiteSpace(CurrentTicketType.Name)) return;

        IsSaving = true;
        await Task.Delay(1000); // Simulate API call

        if (IsEditMode)
        {
            var existing = TicketTypes.FirstOrDefault(t => t.Id == CurrentTicketType.Id);
            if (existing != null)
            {
                existing.Name = CurrentTicketType.Name;
                existing.Description = CurrentTicketType.Description;
                existing.Icon = CurrentTicketType.Icon;
                existing.Color = CurrentTicketType.Color;
                existing.SortOrder = CurrentTicketType.SortOrder;
            }
        }
        else
        {
            CurrentTicketType.Id = Guid.NewGuid();
            CurrentTicketType.CreatedAt = DateTime.Now;
            CurrentTicketType.IsActive = true;
            TicketTypes.Add(CurrentTicketType);
        }

        IsSaving = false;
        CloseModal();
        StateHasChanged();
    }

    private async Task ToggleStatus(TicketTypeData ticketType)
    {
        ticketType.IsActive = !ticketType.IsActive;
        await Task.Delay(500); // Simulate API call
        StateHasChanged();
    }
    #endregion

    #region Form Fields Management
    private void ManageFormFields(TicketTypeData ticketType)
    {
        SelectedTicketTypeForForm = ticketType;
        ShowFormFieldsModal = true;
    }

    private void CloseFormFieldsModal()
    {
        ShowFormFieldsModal = false;
        SelectedTicketTypeForForm = null;
    }

    private void AddNewFormField()
    {
        // TODO: Open form field creation modal
        Console.WriteLine("Add new form field");
    }

    private void EditFormField(FormFieldData field)
    {
        // TODO: Open form field edit modal
        Console.WriteLine($"Edit form field: {field.DisplayName}");
    }

    private void DeleteFormField(FormFieldData field)
    {
        // TODO: Confirm and delete form field
        Console.WriteLine($"Delete form field: {field.DisplayName}");
    }

    private string GetFieldTypeDisplayName(string fieldType)
    {
        return fieldType switch
        {
            "text" => "Metin",
            "textarea" => "Çok Satırlı Metin",
            "select" => "Seçim Listesi",
            "checkbox" => "Onay Kutusu",
            "file" => "Dosya Yükleme",
            "number" => "Sayı",
            "email" => "E-posta",
            "date" => "Tarih",
            _ => fieldType
        };
    }
    #endregion

    #region Models
    public class TicketTypeData
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "📋";
        public string Color { get; set; } = "#3b82f6";
        public int SortOrder { get; set; }
        public bool IsActive { get; set; } = true;
        public DateTime CreatedAt { get; set; }
        public List<FormFieldData> FormFields { get; set; } = new();
    }

    public class FormFieldData
    {
        public Guid Id { get; set; }
        public string FieldName { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public string FieldType { get; set; } = "";
        public bool IsRequired { get; set; }
        public string? HelpText { get; set; }
        public int SortOrder { get; set; }
    }

    public record ColorOption(string Name, string Value);
    #endregion
}