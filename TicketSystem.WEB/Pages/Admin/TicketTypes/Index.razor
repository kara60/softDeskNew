@page "/admin/ticket-types"
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Ticket Türleri Yönetimi - SoftDesk Admin</PageTitle>

<!-- Page Header -->
<div class="mb-8">
    <div class="flex items-center justify-between">
        <div>
            <h1 class="text-2xl font-semibold text-gray-900 mb-2">Ticket Türleri Yönetimi</h1>
            <p class="text-gray-600">Ticket türlerini ve dinamik form alanlarını tanımlayın</p>
        </div>
        <button @onclick="OpenCreateModal" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-xl text-white bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 shadow-sm transition-all duration-200">
            <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            Yeni Ticket Türü
        </button>
    </div>
</div>

<!-- Loading State -->
@if (IsLoading)
{
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        @for (int i = 0; i < 4; i++)
        {
            <div class="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 animate-pulse">
                <div class="flex items-start justify-between mb-4">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-gray-200 rounded-xl mr-4"></div>
                        <div>
                            <div class="h-4 bg-gray-200 rounded w-32 mb-2"></div>
                            <div class="h-3 bg-gray-200 rounded w-48"></div>
                        </div>
                    </div>
                    <div class="h-6 bg-gray-200 rounded w-16"></div>
                </div>
                <div class="h-20 bg-gray-200 rounded mb-4"></div>
                <div class="flex justify-end space-x-2">
                    <div class="h-8 bg-gray-200 rounded w-16"></div>
                    <div class="h-8 bg-gray-200 rounded w-16"></div>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Ticket Types List -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        @foreach (var ticketType in TicketTypes)
        {
            <div class="bg-white rounded-2xl p-6 shadow-sm border border-gray-100 hover:shadow-md transition-all duration-200">
                <div class="flex items-start justify-between mb-4">
                    <div class="flex items-center">
                        <div class="w-12 h-12 rounded-xl flex items-center justify-center mr-4" style="background-color: @ticketType.Color;">
                            @((MarkupString)ticketType.Icon)
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900">@ticketType.Name</h3>
                            <p class="text-sm text-gray-600">@ticketType.Description</p>
                        </div>
                    </div>
                    <div class="flex items-center space-x-2">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(ticketType.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                            @(ticketType.IsActive ? "Aktif" : "Pasif")
                        </span>
                        <div class="relative">
                            <button @onclick="() => ToggleDropdown(ticketType.Id)" class="p-1 text-gray-400 hover:text-gray-600">
                                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                </svg>
                            </button>
                            @if (OpenDropdownId == ticketType.Id)
                            {
                                <div class="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-10">
                                    <div class="py-1">
                                        <button @onclick="() => EditTicketType(ticketType)" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                            <svg class="w-4 h-4 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                            </svg>
                                            Düzenle
                                        </button>
                                        <button @onclick="() => ManageFormFields(ticketType)" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                            <svg class="w-4 h-4 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                            </svg>
                                            Form Alanları
                                        </button>
                                        <hr class="my-1">
                                        <button @onclick="() => ToggleStatus(ticketType)" class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-50">
                                            <svg class="w-4 h-4 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                                            </svg>
                                            @(ticketType.IsActive ? "Pasifleştir" : "Aktifleştir")
                                        </button>
                                        <button @onclick="() => ConfirmDelete(ticketType)" class="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-red-50">
                                            <svg class="w-4 h-4 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                            </svg>
                                            Sil
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Form Preview -->
                @if (ticketType.FormFields?.Any() == true)
                {
                    <div class="bg-gray-50 rounded-lg p-4 mb-4">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Dinamik Form Alanları:</h4>
                        <div class="space-y-2">
                            @foreach (var field in ticketType.FormFields.Take(3))
                            {
                                <div class="flex items-center text-xs text-gray-600">
                                    <span class="w-2 h-2 bg-blue-400 rounded-full mr-2"></span>
                                    <span class="font-medium">@field.Label</span>
                                    <span class="ml-auto text-gray-500">(@GetFieldTypeText(field.Type))</span>
                                </div>
                            }
                            @if (ticketType.FormFields.Count > 3)
                            {
                                <div class="text-xs text-gray-500 pl-4">
                                    +@(ticketType.FormFields.Count - 3) alan daha...
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                        <div class="flex items-center text-sm text-yellow-800">
                            <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                            Bu tip için henüz form alanı tanımlanmamış
                        </div>
                    </div>
                }

                <!-- Statistics -->
                <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
                    <div class="flex items-center space-x-4">
                        <span>@ticketType.TicketCount ticket</span>
                        <span>•</span>
                        <span>@(ticketType.FormFields?.Count ?? 0) form alanı</span>
                    </div>
                    <span>Sıra: @ticketType.SortOrder</span>
                </div>

                <!-- Actions -->
                <div class="flex justify-end space-x-2">
                    <button @onclick="() => ManageFormFields(ticketType)" class="px-3 py-1 text-xs font-medium text-blue-600 bg-blue-100 rounded-lg hover:bg-blue-200 transition-colors">
                        Form Yönet
                    </button>
                    <button @onclick="() => EditTicketType(ticketType)" class="px-3 py-1 text-xs font-medium text-gray-600 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors">
                        Düzenle
                    </button>
                </div>
            </div>
        }
    </div>

    <!-- Empty State -->
    @if (!TicketTypes.Any())
    {
        <div class="text-center py-12">
            <svg class="mx-auto h-24 w-24 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Henüz ticket türü yok</h3>
            <p class="text-gray-600 mb-4">İlk ticket türünüzü oluşturarak başlayın</p>
            <button @onclick="OpenCreateModal" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700">
                <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                </svg>
                İlk Ticket Türünü Oluştur
            </button>
        </div>
    }
}

<!-- Create/Edit Modal -->
@if (ShowModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-xl shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <h2 class="text-xl font-semibold text-gray-900">
                        @(IsEditMode ? "Ticket Türünü Düzenle" : "Yeni Ticket Türü")
                    </h2>
                    <button @onclick="CloseModal" class="text-gray-400 hover:text-gray-600">
                        <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>

            <EditForm Model="@CurrentTicketType" OnValidSubmit="@SaveTicketType">
                <DataAnnotationsValidator />

                <div class="p-6 space-y-6">
                    <!-- Basic Info -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Tür Adı <span class="text-red-500">*</span>
                            </label>
                            <InputText @bind-Value="CurrentTicketType.Name"
                                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       placeholder="Örn: Hata/Sorun" />
                            <ValidationMessage For="@(() => CurrentTicketType.Name)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Sıralama
                            </label>
                            <InputNumber @bind-Value="CurrentTicketType.SortOrder"
                                         class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">
                            Açıklama
                        </label>
                        <InputTextArea @bind-Value="CurrentTicketType.Description"
                                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                       rows="3"
                                       placeholder="Bu türün ne için kullanılacağını açıklayın..." />
                    </div>

                    <!-- Icon & Color -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                İkon <span class="text-red-500">*</span>
                            </label>
                            <div class="flex items-center space-x-3">
                                <div class="w-12 h-12 rounded-lg flex items-center justify-center border-2 border-gray-200"
                                     style="background-color: @CurrentTicketType.Color;">
                                    @((MarkupString)CurrentTicketType.Icon)
                                </div>
                                <div class="flex-1">
                                    <InputText @bind-Value="CurrentTicketType.Icon"
                                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                               placeholder="SVG kodu veya emoji" />
                                </div>
                            </div>
                            <p class="text-xs text-gray-500 mt-1">SVG kodu veya emoji kullanabilirsiniz</p>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                Renk <span class="text-red-500">*</span>
                            </label>
                            <div class="flex items-center space-x-3">
                                <input type="color" @bind="CurrentTicketType.Color"
                                       class="w-12 h-12 border border-gray-300 rounded-lg cursor-pointer" />
                                <InputText @bind-Value="CurrentTicketType.Color"
                                           class="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                           placeholder="#3B82F6" />
                            </div>
                            <ValidationMessage For="@(() => CurrentTicketType.Color)" class="text-red-500 text-sm mt-1" />
                        </div>
                    </div>

                    <!-- Quick Icon Selection -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Hızlı İkon Seçimi</label>
                        <div class="grid grid-cols-8 gap-2">
                            @foreach (var icon in PredefinedIcons)
                            {
                                <button type="button" @onclick="() => SelectIcon(icon)"
                                        class="w-10 h-10 rounded-lg border-2 @(CurrentTicketType.Icon == icon ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-gray-300") flex items-center justify-center text-lg transition-colors">
                                    @((MarkupString)icon)
                                </button>
                            }
                        </div>
                    </div>

                    <!-- Status -->
                    <div class="flex items-center">
                        <label class="flex items-center">
                            <InputCheckbox @bind-Value="CurrentTicketType.IsActive" class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                            <span class="ml-2 text-sm text-gray-700">Aktif</span>
                        </label>
                    </div>
                </div>

                <div class="px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3">
                    <button type="button" @onclick="CloseModal"
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50">
                        İptal
                    </button>
                    <button type="submit" disabled="@IsSaving"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-lg hover:bg-blue-700 disabled:opacity-50">
                        @if (IsSaving)
                        {
                            <div class="flex items-center">
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Kaydediliyor...
                            </div>
                        }
                        else
                        {
                            <span>@(IsEditMode ? "Güncelle" : "Oluştur")</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private List<TicketTypeViewModel> TicketTypes = new();
    private TicketTypeViewModel CurrentTicketType = new();
    private bool ShowModal = false;
    private bool IsEditMode = false;
    private bool IsLoading = true;
    private bool IsSaving = false;
    private Guid? OpenDropdownId = null;

    private readonly List<string> PredefinedIcons = new()
    {
        "🐛", "⚡", "📋", "🔧", "📊", "💡", "🚀", "⚙️",
        "📝", "🎯", "📈", "🔍", "💻", "📱", "🌐", "🔒"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadTicketTypes();
    }

    private async Task LoadTicketTypes()
    {
        IsLoading = true;
        try
        {
            // Simulated data - replace with actual API call
            await Task.Delay(1000);
            TicketTypes = new List<TicketTypeViewModel>
            {
                new TicketTypeViewModel
                {
                    Id = Guid.NewGuid(),
                    Name = "Hata/Sorun",
                    Description = "Sistemde karşılaşılan hatalar ve sorunlar",
                    Icon = "🐛",
                    Color = "#ef4444",
                    SortOrder = 1,
                    IsActive = true,
                    TicketCount = 45,
                    FormFields = new List<FormFieldViewModel>
                    {
                        new FormFieldViewModel { Label = "Hata Detayı", Type = "textarea" },
                        new FormFieldViewModel { Label = "Hata Mesajı", Type = "text" },
                        new FormFieldViewModel { Label = "Etki Seviyesi", Type = "select" }
                    }
                },
                new TicketTypeViewModel
                {
                    Id = Guid.NewGuid(),
                    Name = "Yeni Özellik",
                    Description = "Sisteme eklenmesi istenen yeni özellikler",
                    Icon = "⚡",
                    Color = "#10b981",
                    SortOrder = 2,
                    IsActive = true,
                    TicketCount = 23,
                    FormFields = new List<FormFieldViewModel>
                    {
                        new FormFieldViewModel { Label = "Özellik Açıklaması", Type = "textarea" },
                        new FormFieldViewModel { Label = "Beklenen Fayda", Type = "text" },
                        new FormFieldViewModel { Label = "Aciliyet", Type = "select" }
                    }
                },
                new TicketTypeViewModel
                {
                    Id = Guid.NewGuid(),
                    Name = "Danışmanlık/Eğitim",
                    Description = "Sistem kullanımı hakkında eğitim ve danışmanlık",
                    Icon = "📋",
                    Color = "#3b82f6",
                    SortOrder = 3,
                    IsActive = true,
                    TicketCount = 12,
                    FormFields = null
                }
            };
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Veriler yüklenirken hata: {ex.Message}", "error");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void OpenCreateModal()
    {
        CurrentTicketType = new TicketTypeViewModel { Color = "#3b82f6", SortOrder = TicketTypes.Count + 1, IsActive = true };
        IsEditMode = false;
        ShowModal = true;
        OpenDropdownId = null;
    }

    private void EditTicketType(TicketTypeViewModel ticketType)
    {
        CurrentTicketType = new TicketTypeViewModel
        {
            Id = ticketType.Id,
            Name = ticketType.Name,
            Description = ticketType.Description,
            Icon = ticketType.Icon,
            Color = ticketType.Color,
            SortOrder = ticketType.SortOrder,
            IsActive = ticketType.IsActive
        };
        IsEditMode = true;
        ShowModal = true;
        OpenDropdownId = null;
    }

    private void CloseModal()
    {
        ShowModal = false;
        CurrentTicketType = new TicketTypeViewModel();
        IsEditMode = false;
    }

    private async Task SaveTicketType()
    {
        IsSaving = true;
        try
        {
            // Simulate API call
            await Task.Delay(1500);

            if (IsEditMode)
            {
                var existing = TicketTypes.FirstOrDefault(t => t.Id == CurrentTicketType.Id);
                if (existing != null)
                {
                    existing.Name = CurrentTicketType.Name;
                    existing.Description = CurrentTicketType.Description;
                    existing.Icon = CurrentTicketType.Icon;
                    existing.Color = CurrentTicketType.Color;
                    existing.SortOrder = CurrentTicketType.SortOrder;
                    existing.IsActive = CurrentTicketType.IsActive;
                }
                await JSRuntime.InvokeVoidAsync("showToast", "Ticket türü güncellendi", "success");
            }
            else
            {
                CurrentTicketType.Id = Guid.NewGuid();
                TicketTypes.Add(CurrentTicketType);
                await JSRuntime.InvokeVoidAsync("showToast", "Yeni ticket türü oluşturuldu", "success");
            }

            CloseModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"İşlem sırasında hata: {ex.Message}", "error");
        }
        finally
        {
            IsSaving = false;
        }
    }

    private void SelectIcon(string icon)
    {
        CurrentTicketType.Icon = icon;
    }

    private void ToggleDropdown(Guid ticketTypeId)
    {
        OpenDropdownId = OpenDropdownId == ticketTypeId ? null : ticketTypeId;
    }

    private async Task ToggleStatus(TicketTypeViewModel ticketType)
    {
        try
        {
            ticketType.IsActive = !ticketType.IsActive;
            await JSRuntime.InvokeVoidAsync("showToast",
                $"Ticket türü {(ticketType.IsActive ? "aktifleştirildi" : "pasifleştirildi")}", "success");
            OpenDropdownId = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", $"Durum değiştirilirken hata: {ex.Message}", "error");
        }
    }

    private async Task ConfirmDelete(TicketTypeViewModel ticketType)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"'{ticketType.Name}' türünü silmek istediğinizden emin misiniz?\n\nBu işlem geri alınamaz ve bu türdeki tüm ticket'lar etkilenebilir.");

        if (confirmed)
        {
            try
            {
                TicketTypes.Remove(ticketType);
                await JSRuntime.InvokeVoidAsync("showToast", "Ticket türü silindi", "success");
                OpenDropdownId = null;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", $"Silme işlemi sırasında hata: {ex.Message}", "error");
            }
        }
    }

    private void ManageFormFields(TicketTypeViewModel ticketType)
    {
        // Form fields management modal will be implemented
        JSRuntime.InvokeVoidAsync("showToast", "Form alanları yönetimi geliştirilecek", "info");
        OpenDropdownId = null;
    }

    private string GetFieldTypeText(string type)
    {
        return type switch
        {
            "text" => "Metin",
            "textarea" => "Çok Satırlı Metin",
            "select" => "Seçim Listesi",
            "radio" => "Radyo Buton",
            "checkbox" => "Onay Kutusu",
            "number" => "Sayı",
            "date" => "Tarih",
            "email" => "E-posta",
            "file" => "Dosya",
            _ => type
        };
    }

    // Click outside to close dropdown
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.addEventListener('click', function(e) {
                    if (!e.target.closest('.relative')) {
                        DotNet.invokeMethodAsync('TicketSystem.WEB', 'CloseAllDropdowns');
                    }
                });
            ");
        }
    }

    [JSInvokable]
    public static void CloseAllDropdowns()
    {
        // This would be implemented to close dropdowns
    }

    // Model Classes
    public class TicketTypeViewModel
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string Description { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Color { get; set; } = "";
        public int SortOrder { get; set; }
        public bool IsActive { get; set; }
        public int TicketCount { get; set; }
        public List<FormFieldViewModel>? FormFields { get; set; }
    }

    public class FormFieldViewModel
    {
        public string Label { get; set; } = "";
        public string Type { get; set; } = "";
    }
}